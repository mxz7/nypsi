generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user specific tables (economy etc.)

model User {
  id             String   @id
  lastKnownTag   String
  karma          Int      @default(1)
  lastCommand    DateTime
  tracking       Boolean  @default(true)
  lastfmUsername String?
  email          String?  @unique

  Economy            Economy?
  Premium            Premium?
  Username           Username[]
  WordleStats        WordleStats?
  EconomyGuildMember EconomyGuildMember?
  EconomyGuild       EconomyGuild?
  Auction            Auction[]
  Survey             Survey[]
  CommandUse         CommandUse[]
  Achievements       Achievements[]
  DMSettings         DMSettings?
}

model DMSettings {
  userId String @id

  rob           Boolean @default(true)
  lottery       Boolean @default(true)
  premium       Boolean @default(true)
  auction       Boolean @default(true)
  vote          Boolean @default(true)
  vote_reminder Boolean @default(false)
  worker        Boolean @default(false)
  booster       Boolean @default(false)
  payment       Boolean @default(true)
  other         Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
}

model CommandUse {
  userId  String
  command String
  uses    Int    @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, command])
}

model Achievements {
  userId        String
  achievementId String
  completed     Boolean   @default(false)
  completedAt   DateTime?
  progress      Int       @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model Economy {
  money       BigInt  @default(500)
  bank        BigInt  @default(9500)
  bankStorage BigInt  @default(5000)
  defaultBet  Int?
  xp          Int     @default(0)
  prestige    Int     @default(0)
  padlock     Boolean @default(false)

  lastDaily DateTime @default("1970-01-01T14:21:00+02:00")
  lastVote  DateTime

  dailyStreak Int @default(0)

  banned DateTime?

  auction_watch String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  Boosters      Booster[]
  EconomyStats  EconomyStats[]
  LotteryTicket LotteryTicket[]
  EconomyWorker EconomyWorker[]
  Inventory     Inventory[]
}

model Inventory {
  userId String

  item   String
  amount Int    @default(1)

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, item])
  @@index([userId, item])
}

model EconomyWorker {
  userId   String
  workerId String

  stored Int @default(0)

  upgrades EconomyWorkerUpgrades[]

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, workerId])
}

model EconomyWorkerUpgrades {
  userId   String
  workerId String

  upgradeId String
  amount    Int    @default(1)

  worker EconomyWorker @relation(fields: [userId, workerId], references: [userId, workerId], onDelete: Cascade)

  @@id([userId, workerId, upgradeId])
}

model LotteryTicket {
  id     Int    @id @default(autoincrement())
  userId String

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Booster {
  id        String   @id @default(uuid())
  userId    String
  boosterId String
  expire    DateTime

  Economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model EconomyStats {
  type   String
  win    BigInt  @default(0)
  lose   BigInt  @default(0)
  gamble Boolean

  economy       Economy @relation(fields: [economyUserId], references: [userId], onDelete: Cascade)
  economyUserId String

  @@id([type, economyUserId])
}

model Premium {
  level      Int
  embedColor String   @default("default")
  lastWeekly DateTime
  status     Int      @default(1)
  startDate  DateTime
  expireDate DateTime

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @id
  PremiumCommand PremiumCommand?
}

model PremiumCommand {
  owner   String @id
  trigger String @unique
  content String
  uses    Int    @default(0)

  premium Premium @relation(fields: [owner], references: [userId], onDelete: Cascade)
}

model Username {
  id    String   @id @default(uuid())
  type  String   @default("username")
  value String
  date  DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model WordleStats {
  win1    Int   @default(0)
  win2    Int   @default(0)
  win3    Int   @default(0)
  win4    Int   @default(0)
  win5    Int   @default(0)
  win6    Int   @default(0)
  lose    Int   @default(0)
  history Int[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id
}

model Auction {
  id         String   @id @default(uuid())
  ownerId    String
  itemName   String
  itemAmount Int      @default(1)
  bin        BigInt
  messageId  String   @unique
  createdAt  DateTime @default(now())
  sold       Boolean  @default(false)

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Survey {
  id         String   @id @default(uuid())
  ownerId    String
  surveyText String
  resultsAt  DateTime
  messageId  String   @unique
  channelId  String

  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  SurveyData SurveyData[]
}

model SurveyData {
  userId   String
  surveyId String
  value    String

  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@id([userId, surveyId])
}

// guild specific tables

model Guild {
  id               String   @id
  peak             Int      @default(0)
  disabledCommands String[]
  snipeFilter      String[]
  chatFilter       String[]
  percentMatch     Int      @default(75)
  prefix           String   @default("$")
  createdAt        DateTime @default(now())
  slash_only       Boolean  @default(false)

  GuildChristmas GuildChristmas?
  GuildCounter   GuildCounter?
  GuildCountdown GuildCountdown[]

  ChatReaction ChatReaction?

  Moderation Moderation?
}

model GuildChristmas {
  enabled Boolean @default(false)
  format  String  @default("`%days%` days until christmas")
  channel String  @default("")

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String @id @unique
}

model GuildCounter {
  enabled    Boolean @default(false)
  format     String  @default("members: %count% (%peak%)")
  filterBots Boolean @default(false)
  channel    String  @default("")

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String @id @unique
}

model GuildCountdown {
  id          String
  date        DateTime
  format      String
  finalFormat String
  channel     String

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  @@id([guildId, id])
}

model Moderation {
  caseCount Int     @default(0)
  muteRole  String?
  modlogs   String?
  logs      String?

  guild          Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId        String           @unique
  ModerationBan  ModerationBan[]
  ModerationMute ModerationMute[]
  ModerationCase ModerationCase[]
}

model ModerationBan {
  userId  String
  guildId String
  expire  DateTime

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationMute {
  userId  String
  guildId String
  expire  DateTime

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationCase {
  caseId    String
  guildId   String
  type      String
  user      String
  moderator String
  command   String
  time      DateTime
  deleted   Boolean  @default(false)

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([caseId, guildId])
}

model ChatReaction {
  wordList       String[]
  randomStart    Boolean  @default(false)
  randomChannels String[]
  betweenEvents  Int      @default(600)
  randomModifier Int      @default(300)
  timeout        Int      @default(60)
  blacklisted    String[]

  guild             Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId           String              @unique
  ChatReactionStats ChatReactionStats[]
}

model ChatReactionStats {
  userId String
  wins   Int    @default(0)
  second Int    @default(0)
  third  Int    @default(0)

  chatReaction        ChatReaction @relation(fields: [chatReactionGuildId], references: [guildId], onDelete: Cascade)
  chatReactionGuildId String

  @@id([chatReactionGuildId, userId])
}

// economy 'guild' feature tables

model EconomyGuild {
  guildName String   @id
  createdAt DateTime
  balance   Int      @default(0)
  xp        Int      @default(0)
  level     Int      @default(1)
  motd      String   @default("welcome to the guild fool (/guild motd)")

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @unique

  members EconomyGuildMember[]
}

model EconomyGuildMember {
  userId           String   @unique
  guildName        String
  joinedAt         DateTime
  contributedMoney Int      @default(0)
  contributedXp    Int      @default(0)

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild EconomyGuild @relation(fields: [guildName], references: [guildName], onDelete: Cascade)

  @@id([userId, guildName])
}

// wholesome tables

model WholesomeImage {
  id          Int      @id @default(autoincrement())
  image       String   @unique()
  submitter   String
  submitterId String
  uploadDate  DateTime
  accepterId  String
}

model WholesomeSuggestion {
  id          Int      @id @default(autoincrement())
  image       String   @unique()
  submitter   String
  submitterId String
  uploadDate  DateTime
}

// tables with no relation for easiness

model Mention {
  guildId  String
  targetId String
  date     DateTime
  userTag  String
  url      String   @id
  content  String

  @@index([guildId], type: Hash)
}

model SupportRequest {
  userId    String @id
  channelId String @unique
}

model KofiPurchases {
  id String @id @default(uuid())

  email String
  item  String
}
