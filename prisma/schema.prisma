generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

// user specific tables (economy etc.)

model User {
  id                String   @id
  lastKnownUsername String   @map("lastKnownTag")
  avatar            String   @default("https://cdn.discordapp.com/embed/avatars/0.png")
  karma             Int      @default(1)
  lastCommand       DateTime
  tracking          Boolean  @default(true)
  lastfmUsername    String?
  email             String?  @unique
  blacklisted       Boolean  @default(false)
  adminLevel        Int      @default(0)
  booster           Boolean  @default(false)

  birthday         DateTime?
  birthdayAnnounce Boolean   @default(true)

  Economy                  Economy?
  Premium                  Premium?
  Username                 Username[]
  WordleStats              WordleStats?
  CommandUse               CommandUse[]
  Achievements             Achievements[]
  DMSettings               DMSettings?
  Preferences              Preferences?
  Leaderboards             Leaderboards[]
  ActiveChannels           ActiveChannels[]
  Tags                     Tags[]
  Views                    ProfileView[]
  Viewed                   ProfileView[]              @relation(name: "viewer")
  Sessions                 Session[]
  Captchas                 Captcha[]
  ModerationEvidence       ModerationEvidence[]
  ChatReactionLeaderboards ChatReactionLeaderboards[]
  z                        z?
  Purchases                Purchases[]
  WordleGame               WordleGame[]
}

model ProfileView {
  id BigInt @id @default(autoincrement())

  userId    String
  createdAt DateTime @default(now())

  source   ProfileViewSource
  viewerId String?
  viewerIp String?
  referrer String?

  viewer User? @relation(fields: [viewerId], references: [id], name: "viewer", onDelete: SetNull)
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ProfileViewSource {
  WEB
  BOT
}

model Tags {
  userId   String
  tagId    String
  selected Boolean  @default(false)
  created  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
}

model Leaderboards {
  userId      String
  leaderboard String
  position    Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leaderboard, position])
  @@unique([userId, leaderboard])
}

model ChatReactionLeaderboards {
  userId    String
  daily     Boolean
  time      Float
  createdAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([daily, userId])
}

model DMSettings {
  userId String @id

  rob            Boolean         @default(true)
  lottery        Boolean         @default(true)
  premium        Boolean         @default(true)
  auction        Boolean         @default(true)
  voteReminder   Boolean         @default(false)
  worker         WorkerDmSetting @default(OnlyWhenFull)
  booster        Boolean         @default(false)
  payment        Boolean         @default(true)
  other          Boolean         @default(true)
  netWorth       Int             @default(0)
  autosellStatus Boolean         @default(true)
  level          LevelDmSetting  @default(OnlyReward)
  farmHealth     Boolean         @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WorkerDmSetting {
  Disabled
  All
  OnlyWhenFull
}

enum LevelDmSetting {
  Disabled
  All
  OnlyReward
}

model Preferences {
  userId String @id

  duelRequests   Boolean @default(true)
  auctionConfirm Int     @default(25000000)
  offers         Int     @default(3)
  leaderboards   Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommandUse {
  userId  String
  command String
  uses    Int    @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, command])
}

model Achievements {
  userId        String
  achievementId String
  completed     Boolean   @default(false)
  completedAt   DateTime?
  progress      Int       @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model Economy {
  money       BigInt @default(500)
  bank        BigInt @default(9500)
  bankStorage BigInt @default(5000)
  netWorth    BigInt @default(0)

  defaultBet Int?
  padlock    Boolean @default(false)
  passive    Boolean @default(false)

  xp       BigInt @default(0)
  level    Int    @default(0)
  prestige Int    @default(0)

  lastDaily DateTime @default("1970-01-01T14:21:00+02:00")
  lastVote  DateTime @default("1970-01-01T14:21:00+02:00")
  lastBake  DateTime @default("1970-01-01T14:21:00+02:00")

  monthVote        Int @default(0)
  seasonVote       Int @default(0)
  dailyStreak      Int @default(0)
  dailyTaskStreak  Int @default(0)
  weeklyTaskStreak Int @default(0)

  banned DateTime?

  autosell    String[]
  offersBlock String[]

  dailyLottery Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  auctionWatch       AuctionWatch[]
  Boosters           Booster[]
  EconomyWorker      EconomyWorker[]
  Inventory          Inventory[]
  Crafting           Crafting[]
  Game               Game[]
  Stats              Stats[]
  BakeryUpgrade      BakeryUpgrade[]
  Auction            Auction[]
  EconomyGuild       EconomyGuild?
  EconomyGuildMember EconomyGuildMember?
  OffersReceived     Offer[]             @relation(name: "target")
  OffersGiven        Offer[]             @relation(name: "owner")
  Upgrades           Upgrades[]
  Task               Task[]
  CustomCar          CustomCar[]
  Farm               Farm[]
  FarmUpgrades       FarmUpgrades[]
}

model Farm {
  id      Int    @id @default(autoincrement())
  userId  String
  plantId String

  plantedAt    DateTime @default(now())
  harvestedAt  DateTime @default(now())
  wateredAt    DateTime @default(now())
  fertilisedAt DateTime @default(now())

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model FarmUpgrades {
  userId  String
  plantId String

  upgradeId String
  amount    Int    @default(1)

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, plantId, upgradeId])
}

model CustomCar {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  name      String
  skin      String?

  userId   String
  economy  Economy      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  upgrades CarUpgrade[]
}

model CarUpgrade {
  createdAt DateTime       @default(now())
  type      CarUpgradeType
  amount    Int            @default(1)

  carId String
  car   CustomCar @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@id([carId, type])
}

enum CarUpgradeType {
  engine
  turbo
  wheel
}

model Task {
  user_id   String
  task_id   String
  progress  BigInt   @default(0)
  target    BigInt
  completed Boolean  @default(false)
  prize     String
  type      TaskType

  economy Economy @relation(fields: [user_id], references: [userId], onDelete: Cascade)

  @@id([user_id, task_id])
}

enum TaskType {
  daily
  weekly
}

model Upgrades {
  userId    String
  upgradeId String
  amount    Int

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, upgradeId])
}

model AuctionWatch {
  userId  String
  itemId  String
  maxCost BigInt @default(0)

  Economy Economy? @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, itemId])
}

model BakeryUpgrade {
  userId    String
  upgradeId String
  amount    Int

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, upgradeId])
}

model Crafting {
  id       Int      @id @default(autoincrement())
  userId   String
  itemId   String
  amount   Int
  finished DateTime

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Inventory {
  userId String

  item   String
  amount BigInt @default(1)

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, item])
}

model EconomyWorker {
  userId   String
  workerId String

  stored Int @default(0)

  upgrades EconomyWorkerUpgrades[]

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, workerId])
}

model EconomyWorkerUpgrades {
  userId   String
  workerId String

  upgradeId String
  amount    Int    @default(1)

  worker EconomyWorker @relation(fields: [userId, workerId], references: [userId, workerId], onDelete: Cascade)

  @@id([userId, workerId, upgradeId])
}

model Booster {
  id        Int      @id @default(autoincrement())
  userId    String
  boosterId String
  expire    DateTime

  Economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Game {
  id       Int      @id @default(autoincrement())
  userId   String?
  game     String
  win      Int
  bet      BigInt
  earned   BigInt   @default(0)
  xpEarned Int      @default(0)
  outcome  String
  date     DateTime @default(now())

  economy Economy? @relation(fields: [userId], references: [userId])

  @@index([userId, game])
}

model Stats {
  userId String
  itemId String
  amount BigInt

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, itemId])
}

model Premium {
  level      Int
  embedColor String   @default("default")
  lastWeekly DateTime
  startDate  DateTime
  expireDate DateTime
  credit     Int      @default(0)

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @id
  PremiumCommand PremiumCommand?
  UserAlias      UserAlias[]
}

model UserAlias {
  userId  String
  alias   String
  command String

  premium Premium @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, alias])
}

model PremiumCommand {
  owner   String @id
  trigger String @unique
  content String
  uses    Int    @default(0)

  premium Premium @relation(fields: [owner], references: [userId], onDelete: Cascade)
}

model Username {
  id        Int      @id @default(autoincrement())
  type      String   @default("username")
  value     String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model WordleGame {
  id      Int      @id @default(autoincrement())
  guesses String[]
  word    String
  won     Boolean
  time    Int // milliseconds

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model WordleStats {
  win1    Int   @default(0)
  win2    Int   @default(0)
  win3    Int   @default(0)
  win4    Int   @default(0)
  win5    Int   @default(0)
  win6    Int   @default(0)
  lose    Int   @default(0)
  history Int[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id
}

model Auction {
  id         Int      @id @default(autoincrement())
  ownerId    String
  itemId     String
  itemAmount BigInt   @default(1)
  bin        BigInt
  messageId  String   @unique
  createdAt  DateTime @default(now())
  sold       Boolean  @default(false)

  owner Economy @relation(fields: [ownerId], references: [userId], onDelete: Cascade)

  @@index([itemId])
}

model Offer {
  ownerId    String?
  itemId     String
  itemAmount BigInt    @default(1)
  money      BigInt
  messageId  String    @unique
  targetId   String?
  sold       Boolean   @default(false)
  soldAt     DateTime?
  createdAt  DateTime  @default(now())

  target Economy? @relation(fields: [targetId], references: [userId], name: "target")
  owner  Economy? @relation(fields: [ownerId], references: [userId], name: "owner")

  @@index([itemId])
}

model Aura {
  id          Int      @id @default(autoincrement())
  recipientId String
  senderId    String
  createdAt   DateTime @default(now())
  amount      Int

  @@index([recipientId])
  @@index([senderId])
}

// guild specific tables

model Guild {
  id               String   @id
  peak             Int      @default(0)
  disabledCommands String[]
  snipeFilter      String[]
  prefixes         String[] @default(["$"])
  createdAt        DateTime @default(now())
  slash_only       Boolean  @default(false)
  alt_punish       Boolean  @default(false)
  auto_role        String[]
  persist_role     String[]
  muteRole         String?
  modlogs          String?
  logs             String?
  automute         Int[]    @default([0, 60, 120, 300])
  autoMuteExpire   Int      @default(86400)

  birthdayHook String?

  GuildChristmas GuildChristmas?
  counters       GuildCounter[]
  GuildCountdown GuildCountdown[]

  ChatReaction ChatReaction?

  RolePersist  RolePersist[]
  ReactionRole ReactionRole[]

  Alt                 Alt[]
  cases               ModerationCase[]
  bans                ModerationBan[]
  mutes               ModerationMute[]
  ModerationEvidence  ModerationEvidence[]
  GuildEvidenceCredit GuildEvidenceCredit[]
  ChatFilter          ChatFilter[]
}

model ChatFilter {
  guildId String
  content String

  percentMatch Int?

  guild Guild @relation(fields: [guildId], references: [id])

  @@id([guildId, content])
}

model ReactionRole {
  guildId     String
  channelId   String
  messageId   String           @unique
  title       String?
  description String
  color       String?
  whitelist   String[]
  mode        ReactionRoleMode

  guild Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  roles ReactionRoleRoles[]
}

enum ReactionRoleMode {
  MANY
  UNIQUE
}

model ReactionRoleRoles {
  messageId String
  roleId    String
  label     String
  createdAt DateTime @default(now())

  reactionRole ReactionRole @relation(fields: [messageId], references: [messageId], onDelete: Cascade)

  @@id([messageId, roleId])
}

model RolePersist {
  guildId   String
  userId    String
  createdAt DateTime @default(now())
  roles     String[]

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([guildId, userId])
}

model GuildChristmas {
  enabled Boolean @default(false)
  format  String  @default("`%days%` days until christmas")
  channel String  @default("")

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String @id @unique
}

model GuildCounter {
  format    String       @default("members: %value%")
  tracks    TrackingType @default(HUMANS)
  channel   String       @unique
  totalItem String?

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String
}

enum TrackingType {
  MEMBERS
  HUMANS
  BOOSTS
  RICHEST_MEMBER
  TOTAL_ITEM
  TOTAL_BALANCE
}

model GuildCountdown {
  id          String
  date        DateTime
  format      String
  finalFormat String
  channel     String

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  @@id([guildId, id])
}

model ModerationBan {
  userId  String
  guildId String
  expire  DateTime

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationMute {
  userId  String
  guildId String
  expire  DateTime

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationCase {
  caseId    Int
  guildId   String
  type      String
  user      String
  moderator String
  command   String
  time      DateTime @default(now())
  deleted   Boolean  @default(false)

  evidence ModerationEvidence?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([guildId, caseId])
}

model ModerationEvidence {
  id    String @id
  bytes BigInt

  caseId  Int
  guildId String
  userId  String?

  createdAt DateTime @default(now())

  guild Guild          @relation(fields: [guildId], references: [id], onDelete: Restrict)
  case  ModerationCase @relation(fields: [caseId, guildId], references: [caseId, guildId], onDelete: Restrict)
  user  User?          @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([caseId, guildId])
}

model GuildEvidenceCredit {
  id        Int      @id @default(autoincrement())
  guildId   String
  createdAt DateTime @default(now())

  bytes BigInt

  guild Guild @relation(fields: [guildId], references: [id])
}

model Alt {
  guildId String
  mainId  String
  altId   String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([altId, guildId])
}

model ChatReaction {
  wordListType   ChatReactionWordList @default(english_1k)
  wordList       String[]
  randomStart    Boolean              @default(false)
  randomChannels String[]
  betweenEvents  Int                  @default(600)
  randomModifier Int                  @default(300)
  timeout        Int                  @default(60)
  blacklisted    String[]

  guild             Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId           String              @unique
  ChatReactionStats ChatReactionStats[]
}

enum ChatReactionWordList {
  english_1k
  english_5k
  english_10k
  custom
}

model ChatReactionStats {
  userId String
  wins   Int    @default(0)
  second Int    @default(0)
  third  Int    @default(0)

  chatReaction        ChatReaction @relation(fields: [chatReactionGuildId], references: [guildId], onDelete: Cascade)
  chatReactionGuildId String

  @@id([chatReactionGuildId, userId])
}

// economy 'guild' feature tables

model EconomyGuild {
  guildName String   @id
  createdAt DateTime
  balance   BigInt   @default(0)
  xp        BigInt   @default(0)
  tokens    Int      @default(0)
  level     Int      @default(1)
  motd      String   @default("/guild motd")

  avatarId String?
  avatar   Images? @relation(fields: [avatarId], references: [id], onDelete: SetNull)

  owner   Economy @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  ownerId String  @unique

  members  EconomyGuildMember[]
  upgrades EconomyGuildUpgrades[]
}

model EconomyGuildMember {
  userId                    String   @unique
  guildName                 String
  joinedAt                  DateTime
  contributedMoney          BigInt   @default(0)
  contributedXp             Int      @default(0)
  contributedMoneyThisLevel BigInt   @default(0)
  contributedXpThisLevel    Int      @default(0)

  economy Economy      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  guild   EconomyGuild @relation(fields: [guildName], references: [guildName], onDelete: Cascade)

  @@id([userId, guildName])
}

model EconomyGuildUpgrades {
  guildName String
  upgradeId String
  amount    Int

  guild EconomyGuild @relation(fields: [guildName], references: [guildName], onDelete: Cascade)

  @@id([guildName, upgradeId])
}

// tables with no relation for easiness

model Mention {
  id BigInt @id @default(autoincrement())

  guildId  String
  targetId String
  date     DateTime
  userTag  String
  url      String
  content  String

  @@index([guildId])
}

model SupportRequest {
  userId    String @id
  channelId String @unique
}

model Purchases {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  source    String
  email     String?

  item   String
  amount Int?
  cost   Decimal

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

// data for creating graphs

model GraphMetrics {
  id BigInt @id @default(autoincrement())

  category String

  userId String
  value  BigInt
  date   DateTime
}

// for random drops
model ActiveChannels {
  userId    String
  channelId String
  date      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Captcha {
  id     String @id @default(uuid())
  userId String

  solved   Boolean    @default(false)
  received Int        @default(0)
  visits   DateTime[]

  createdAt DateTime  @default(now())
  solvedAt  DateTime? @default(now())

  user User @relation(fields: [userId], references: [id])
}

model BotMetrics {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  category String
  value    Float
}

// for specific image hosting on cdn.nypsi.xyz
model Images {
  id        String   @id
  createdAt DateTime @default(now())
  bytes     BigInt

  EconomyGuild EconomyGuild[]
}

model z {
  userId String @id

  createdAt DateTime @default(now())
  hasInvite Boolean  @default(false)
  removed   Boolean  @default(false)
  rating    Int      @default(0) @db.SmallInt

  voteKickId  Int[]   @default([])
  invitedById String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  invitedBy z?  @relation("invitedby", fields: [invitedById], references: [userId], onDelete: Cascade)
  invitees  z[] @relation("invitedby")

  userVoteKicks zKicks[] @relation(name: "owner")
  voteKicks     zKicks[] @relation(name: "target")
}

model zKicks {
  userId   String
  targetId String

  createdAt DateTime @default(now())

  zUser   z @relation("owner", fields: [userId], references: [userId], onDelete: Cascade)
  zTarget z @relation("target", fields: [targetId], references: [userId], onDelete: Cascade)

  @@id([userId, targetId])
}
