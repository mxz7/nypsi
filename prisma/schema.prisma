generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user specific tables (economy etc.)

model User {
  id             String   @id
  lastKnownTag   String
  karma          Int      @default(1)
  lastCommand    DateTime
  tracking       Boolean  @default(true)
  lastfmUsername String?
  email          String?  @unique
  blacklisted    Boolean  @default(false)
  adminLevel     Int      @default(0)
  booster        Boolean  @default(false)

  Economy      Economy?
  Premium      Premium?
  Username     Username[]
  WordleStats  WordleStats?
  CommandUse   CommandUse[]
  Achievements Achievements[]
  DMSettings   DMSettings?
  Preferences  Preferences?
}

model DMSettings {
  userId String @id

  rob          Boolean         @default(true)
  lottery      Boolean         @default(true)
  premium      Boolean         @default(true)
  auction      Boolean         @default(true)
  vote         Boolean         @default(true)
  voteReminder Boolean         @default(false)
  worker       WorkerDmSetting @default(OnlyWhenFull)
  booster      Boolean         @default(false)
  payment      Boolean         @default(true)
  other        Boolean         @default(true)
  netWorth     Int             @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WorkerDmSetting {
  Disabled
  All
  OnlyWhenFull
}

model Preferences {
  userId String @id

  duelRequests   Boolean @default(true)
  auctionConfirm Int     @default(25000000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommandUse {
  userId  String
  command String
  uses    Int    @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, command])
}

model Achievements {
  userId        String
  achievementId String
  completed     Boolean   @default(false)
  completedAt   DateTime?
  progress      Int       @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementId])
}

model Economy {
  money       BigInt  @default(500)
  bank        BigInt  @default(9500)
  bankStorage BigInt  @default(5000)
  netWorth    BigInt  @default(0)
  defaultBet  Int?
  xp          Int     @default(0)
  prestige    Int     @default(0)
  padlock     Boolean @default(false)
  passive     Boolean @default(false)

  lastDaily DateTime @default("1970-01-01T14:21:00+02:00")
  lastVote  DateTime @default("1970-01-01T14:21:00+02:00")
  lastBake  DateTime @default("1970-01-01T14:21:00+02:00")

  dailyStreak Int @default(0)

  banned DateTime?

  auctionWatch String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  Boosters           Booster[]
  LotteryTicket      LotteryTicket[]
  EconomyWorker      EconomyWorker[]
  Inventory          Inventory[]
  Crafting           Crafting[]
  Game               Game[]
  ItemUse            ItemUse[]
  BakeryUpgrade      BakeryUpgrade[]
  Auction            Auction[]
  EconomyGuild       EconomyGuild?
  EconomyGuildMember EconomyGuildMember?
}

model BakeryUpgrade {
  userId    String
  upgradeId String
  amount    Int

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, upgradeId])
}

model Crafting {
  id       String   @id @default(uuid())
  userId   String
  itemId   String
  amount   Int
  finished DateTime

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Inventory {
  userId String

  item   String
  amount BigInt @default(1)

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, item])
  @@index([userId, item])
}

model EconomyWorker {
  userId   String
  workerId String

  stored Int @default(0)

  upgrades EconomyWorkerUpgrades[]

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, workerId])
}

model EconomyWorkerUpgrades {
  userId   String
  workerId String

  upgradeId String
  amount    Int    @default(1)

  worker EconomyWorker @relation(fields: [userId, workerId], references: [userId, workerId], onDelete: Cascade)

  @@id([userId, workerId, upgradeId])
}

model LotteryTicket {
  id     Int    @id @default(autoincrement())
  userId String

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Booster {
  id        String   @id @default(uuid())
  userId    String
  boosterId String
  expire    DateTime

  Economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Game {
  id       Int      @id @default(autoincrement())
  userId   String?
  game     String
  win      Int
  bet      BigInt
  earned   BigInt   @default(0)
  xpEarned Int      @default(0)
  outcome  String
  date     DateTime @default(now())

  economy Economy? @relation(fields: [userId], references: [userId])
}

model ItemUse {
  userId String
  itemId String
  amount Int

  economy Economy @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, itemId])
}

model Premium {
  level      Int
  embedColor String   @default("default")
  lastWeekly DateTime
  status     Int      @default(1)
  startDate  DateTime
  expireDate DateTime

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @id
  PremiumCommand PremiumCommand?
  UserAlias      UserAlias[]
}

model UserAlias {
  userId  String
  alias   String
  command String

  premium Premium @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, alias])
}

model PremiumCommand {
  owner   String @id
  trigger String @unique
  content String
  uses    Int    @default(0)

  premium Premium @relation(fields: [owner], references: [userId], onDelete: Cascade)
}

model Username {
  id    String   @id @default(uuid())
  type  String   @default("username")
  value String
  date  DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model WordleStats {
  win1    Int   @default(0)
  win2    Int   @default(0)
  win3    Int   @default(0)
  win4    Int   @default(0)
  win5    Int   @default(0)
  win6    Int   @default(0)
  lose    Int   @default(0)
  history Int[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id
}

model Auction {
  id         Int      @id @default(autoincrement())
  ownerId    String
  itemId     String
  itemAmount Int      @default(1)
  bin        BigInt
  messageId  String   @unique
  createdAt  DateTime @default(now())
  sold       Boolean  @default(false)

  owner Economy @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
}

// guild specific tables

model Guild {
  id               String   @id
  peak             Int      @default(0)
  disabledCommands String[]
  snipeFilter      String[]
  chatFilter       String[]
  percentMatch     Int      @default(75)
  prefix           String   @default("$")
  createdAt        DateTime @default(now())
  slash_only       Boolean  @default(false)
  auto_role        String[]
  persist_role     String[]

  GuildChristmas GuildChristmas?
  counters       GuildCounter[]
  GuildCountdown GuildCountdown[]

  ChatReaction ChatReaction?

  Moderation   Moderation?
  RolePersist  RolePersist[]
  ReactionRole ReactionRole[]
}

model ReactionRole {
  guildId     String
  channelId   String
  messageId   String           @unique
  title       String?
  description String
  color       String?
  whitelist   String[]
  mode        ReactionRoleMode

  guild Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  roles ReactionRoleRoles[]
}

enum ReactionRoleMode {
  MANY
  UNIQUE
}

model ReactionRoleRoles {
  messageId String
  roleId    String
  label     String
  createdAt DateTime @default(now())

  reactionRole ReactionRole @relation(fields: [messageId], references: [messageId], onDelete: Cascade)

  @@id([messageId, roleId])
}

model RolePersist {
  guildId   String
  userId    String
  createdAt DateTime @default(now())
  roles     String[]

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@id([guildId, userId])
}

model GuildChristmas {
  enabled Boolean @default(false)
  format  String  @default("`%days%` days until christmas")
  channel String  @default("")

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String @id @unique
}

model GuildCounter {
  format    String       @default("members: %value%")
  tracks    TrackingType @default(HUMANS)
  channel   String       @unique
  totalItem String?

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String
}

enum TrackingType {
  MEMBERS
  HUMANS
  BOOSTS
  RICHEST_MEMBER
  TOTAL_ITEM
  TOTAL_BALANCE
}

model GuildCountdown {
  id          String
  date        DateTime
  format      String
  finalFormat String
  channel     String

  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String

  @@id([guildId, id])
}

model Moderation {
  caseCount Int     @default(0)
  muteRole  String?
  modlogs   String?
  logs      String?
  automute  Int[]   @default([0, 60, 120, 300])

  guild          Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId        String           @unique
  ModerationBan  ModerationBan[]
  ModerationMute ModerationMute[]
  ModerationCase ModerationCase[]
}

model ModerationBan {
  userId  String
  guildId String
  expire  DateTime

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationMute {
  userId  String
  guildId String
  expire  DateTime

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([userId, guildId])
}

model ModerationCase {
  caseId    String
  guildId   String
  type      String
  user      String
  moderator String
  command   String
  time      DateTime
  deleted   Boolean  @default(false)

  moderation Moderation @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([caseId, guildId])
}

model ChatReaction {
  wordList       String[]
  randomStart    Boolean  @default(false)
  randomChannels String[]
  betweenEvents  Int      @default(600)
  randomModifier Int      @default(300)
  timeout        Int      @default(60)
  blacklisted    String[]

  guild             Guild               @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId           String              @unique
  ChatReactionStats ChatReactionStats[]
}

model ChatReactionStats {
  userId String
  wins   Int    @default(0)
  second Int    @default(0)
  third  Int    @default(0)

  chatReaction        ChatReaction @relation(fields: [chatReactionGuildId], references: [guildId], onDelete: Cascade)
  chatReactionGuildId String

  @@id([chatReactionGuildId, userId])
}

// economy 'guild' feature tables

model EconomyGuild {
  guildName String   @id
  createdAt DateTime
  balance   BigInt   @default(0)
  xp        Int      @default(0)
  level     Int      @default(1)
  motd      String   @default("welcome to the guild fool (/guild motd)")

  owner   Economy @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  ownerId String  @unique

  members EconomyGuildMember[]
}

model EconomyGuildMember {
  userId           String   @unique
  guildName        String
  joinedAt         DateTime
  contributedMoney BigInt   @default(0)
  contributedXp    Int      @default(0)

  economy Economy      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  guild   EconomyGuild @relation(fields: [guildName], references: [guildName], onDelete: Cascade)

  @@id([userId, guildName])
}

// wholesome tables

model WholesomeImage {
  id          Int      @id @default(autoincrement())
  image       String   @unique()
  submitter   String
  submitterId String
  uploadDate  DateTime
  accepterId  String
}

model WholesomeSuggestion {
  id          Int      @id @default(autoincrement())
  image       String   @unique()
  submitter   String
  submitterId String
  uploadDate  DateTime
}

// tables with no relation for easiness

model Mention {
  guildId  String
  targetId String
  date     DateTime
  userTag  String
  url      String   @id
  content  String
}

model SupportRequest {
  userId    String @id
  channelId String @unique
}

model KofiPurchases {
  id String @id @default(uuid())

  email String
  item  String
}

// data for creating graphs

model GraphMetrics {
  id Int @id @default(autoincrement())

  category String

  userId String
  value  BigInt
  date   DateTime
}
